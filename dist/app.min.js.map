{"version":3,"sources":["app.js"],"names":["express","require","mongoose","dotenv","shapesRouter","cors","app","markersRouter","use","uploadRouter","json","port","PORT","connect","process","env","MONGODB_URI","useNewUrlParser","then","console","log","error","message","err","req","res","next","stack","module","exports"],"mappings":"aACA,IAAMA,QAAUC,QAAQ,WADxBC,SAAAD,QAAA,YACMD,KAAOC,QAAU,QAGjBE,OAASF,QAAQ,UAFjBC,cAAkBD,QAAC,oBAInBG,aAAeH,QAAQ,mBAHvBI,aAAeJ,QAArB,mBACAE,OAAMA,SAMN,IAAMG,IAAMN,UALNO,KAAAA,QAAgBN,IAAAA,MAAQ,KAS9BK,IAAIE,IAAIH,QAPRC,IAAMG,IAAAA,QAAYC,QAGlBJ,IAAMA,IAAG,eAATC,eACAD,IAAMK,IAAI,cAAeC,cASzBN,IAAIE,IAAI,cAAeC,cAGvBP,SAASW,QAAQC,QAAQC,IAAIC,YAAa,CAL1CV,iBAAQ,EACRA,oBAAA,IAIAJ,KAAAA,WACEe,QAAAA,IAAAA,wBADFX,IAKCY,OAAKP,KAAA,WACJQ,QAAQC,IAARD,yCAAAA,OAEAR,WARF,MAUIQ,SAAAA,GACDA,QAFDE,MAAA,+BAAAA,EAAAC,WASFhB,IAAIE,IAAI,SAACe,EAAKC,EAAKC,EAAKC,GAAxBpB,QAAQe,MAAAE,EAACA,OACPJ,EAAAA,OAAQE,KAAME,KAAII,sBAIpBC,OAAOC,QAAUvB","file":"app.min.js","sourcesContent":["// server/app.js\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst dotenv = require('dotenv');\r\nconst markersRouter = require('./routes/markers');\r\nconst shapesRouter = require('./routes/shapes');\r\nconst uploadRouter = require('./routes/upload');\r\n\r\ndotenv.config();\r\nconst app = express();\r\nconst port = process.env.PORT || 3001;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Routes\r\napp.use('/api/markers', markersRouter);\r\napp.use('/api/shapes', shapesRouter);\r\napp.use('/api/upload', uploadRouter);\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n  // Remove the useCreateIndex option as it's deprecated\r\n})\r\n.then(() => {\r\n  console.log('Connected to MongoDB');\r\n\r\n  // Start the server\r\n  app.listen(port, () => {\r\n    console.log(`Server is running on http://localhost:${port}`);\r\n  });\r\n})\r\n.catch((error) => {\r\n  console.error('Error connecting to MongoDB:', error.message);\r\n});\r\n\r\n// Error handling middleware\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).send('Something broke!');\r\n});\r\n\r\nmodule.exports = app;\r\n"]}