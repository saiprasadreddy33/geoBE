{"version":3,"sources":["authController.js"],"names":["jwt","require","bcrypt","User","generateToken","user","sign","id","_id","process","env","JWT_SECRET","expiresIn","exports","signup","req","res","body","username","email","password","findOne","existingUser","status","json","message","hash","hashedPassword","newUser","save","token","login","compare","isMatch"],"mappings":"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","sourcesContent":["// server/controllers/authController.js\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcryptjs');\r\nconst User = require('../models/User');\r\n\r\n// Function to generate JWT token\r\nconst generateToken = (user) => {\r\n  return jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n};\r\n\r\nexports.signup = async (req, res) => {\r\n  const { username, email, password } = req.body;\r\n\r\n  try {\r\n    // Check if user exists\r\n    let existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create new user\r\n    const newUser = new User({ username, email, password: hashedPassword });\r\n    await newUser.save();\r\n\r\n    // Generate token\r\n    const token = generateToken(newUser);\r\n\r\n    res.status(201).json({ message: 'User created successfully', token });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Check if user exists\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    // Compare passwords\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ message: 'Incorrect password' });\r\n    }\r\n\r\n    // Generate token\r\n    const token = generateToken(user);\r\n\r\n    res.status(200).json({ message: 'Login successful', token });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n"],"file":"authController.dev.js"}