{"version":3,"sources":["datasetController.js"],"names":["Dataset","require","exports","getAllDatasets","req","res","find","datasets","status","json","message","getDatasetById","id","params","findById","dataset","createDataset","body","name","description","data","newDataset","save","updateDataset","deleteDataset","remove"],"mappings":";;AAAA;AACA,IAAMA,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAAvB,C,CAEA;;;AACAC,OAAO,CAACC,cAAR,GAAyB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEEL,OAAO,CAACM,IAAR,EAFF;;AAAA;AAEfC,UAAAA,QAFe;AAGrBF,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,QAArB;AAHqB;AAAA;;AAAA;AAAA;AAAA;AAKrBF,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,YAAMA;AAAjB,WAArB;;AALqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,C,CASA;;;AACAR,OAAO,CAACS,cAAR,GAAyB,kBAAOP,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACfO,UAAAA,EADe,GACRR,GAAG,CAACS,MADI,CACfD,EADe;AAAA;AAAA;AAAA,0CAICZ,OAAO,CAACc,QAAR,CAAiBF,EAAjB,CAJD;;AAAA;AAIfG,UAAAA,OAJe;;AAAA,cAKhBA,OALgB;AAAA;AAAA;AAAA;;AAAA,4CAMZV,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CANY;;AAAA;AAQrBL,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,OAArB;AARqB;AAAA;;AAAA;AAAA;AAAA;AAUrBV,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,aAAMA;AAAjB,WAArB;;AAVqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,C,CAcA;;;AACAR,OAAO,CAACc,aAAR,GAAwB,kBAAOZ,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACcD,GAAG,CAACa,IADlB,EACdC,IADc,aACdA,IADc,EACRC,WADQ,aACRA,WADQ,EACKC,IADL,aACKA,IADL;AAAA;AAIdC,UAAAA,UAJc,GAID,IAAIrB,OAAJ,CAAY;AAAEkB,YAAAA,IAAI,EAAJA,IAAF;AAAQC,YAAAA,WAAW,EAAXA,WAAR;AAAqBC,YAAAA,IAAI,EAAJA;AAArB,WAAZ,CAJC;AAAA;AAAA,0CAKdC,UAAU,CAACC,IAAX,EALc;;AAAA;AAMpBjB,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,8BAAX;AAA2CK,YAAAA,OAAO,EAAEM;AAApD,WAArB;AANoB;AAAA;;AAAA;AAAA;AAAA;AAQpBhB,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,aAAMA;AAAjB,WAArB;;AARoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB,C,CAYA;;;AACAR,OAAO,CAACqB,aAAR,GAAwB,kBAAOnB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACdO,UAAAA,EADc,GACPR,GAAG,CAACS,MADG,CACdD,EADc;AAAA,uBAEcR,GAAG,CAACa,IAFlB,EAEdC,IAFc,cAEdA,IAFc,EAERC,WAFQ,cAERA,WAFQ,EAEKC,IAFL,cAEKA,IAFL;AAAA;AAAA;AAAA,0CAKEpB,OAAO,CAACc,QAAR,CAAiBF,EAAjB,CALF;;AAAA;AAKdG,UAAAA,OALc;;AAAA,cAMfA,OANe;AAAA;AAAA;AAAA;;AAAA,4CAOXV,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAPW;;AAAA;AAUpBK,UAAAA,OAAO,CAACG,IAAR,GAAeA,IAAf;AACAH,UAAAA,OAAO,CAACI,WAAR,GAAsBA,WAAtB;AACAJ,UAAAA,OAAO,CAACK,IAAR,GAAeA,IAAf;AAZoB;AAAA,0CAcdL,OAAO,CAACO,IAAR,EAdc;;AAAA;AAepBjB,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,8BAAX;AAA2CK,YAAAA,OAAO,EAAPA;AAA3C,WAArB;AAfoB;AAAA;;AAAA;AAAA;AAAA;AAiBpBV,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,aAAMA;AAAjB,WAArB;;AAjBoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB,C,CAqBA;;;AACAR,OAAO,CAACsB,aAAR,GAAwB,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACdO,UAAAA,EADc,GACPR,GAAG,CAACS,MADG,CACdD,EADc;AAAA;AAAA;AAAA,0CAIEZ,OAAO,CAACc,QAAR,CAAiBF,EAAjB,CAJF;;AAAA;AAIdG,UAAAA,OAJc;;AAAA,cAKfA,OALe;AAAA;AAAA;AAAA;;AAAA,4CAMXV,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CANW;;AAAA;AAAA;AAAA,0CASdK,OAAO,CAACU,MAAR,EATc;;AAAA;AAUpBpB,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AAVoB;AAAA;;AAAA;AAAA;AAAA;AAYpBL,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE,aAAMA;AAAjB,WAArB;;AAZoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["// server/controllers/datasetController.js\r\nconst Dataset = require('../models/Dataset');\r\n\r\n// Get all datasets\r\nexports.getAllDatasets = async (req, res) => {\r\n  try {\r\n    const datasets = await Dataset.find();\r\n    res.status(200).json(datasets);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Get dataset by ID\r\nexports.getDatasetById = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const dataset = await Dataset.findById(id);\r\n    if (!dataset) {\r\n      return res.status(404).json({ message: 'Dataset not found' });\r\n    }\r\n    res.status(200).json(dataset);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Create a new dataset\r\nexports.createDataset = async (req, res) => {\r\n  const { name, description, data } = req.body;\r\n\r\n  try {\r\n    const newDataset = new Dataset({ name, description, data });\r\n    await newDataset.save();\r\n    res.status(201).json({ message: 'Dataset created successfully', dataset: newDataset });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Update dataset by ID\r\nexports.updateDataset = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { name, description, data } = req.body;\r\n\r\n  try {\r\n    const dataset = await Dataset.findById(id);\r\n    if (!dataset) {\r\n      return res.status(404).json({ message: 'Dataset not found' });\r\n    }\r\n    \r\n    dataset.name = name;\r\n    dataset.description = description;\r\n    dataset.data = data;\r\n\r\n    await dataset.save();\r\n    res.status(200).json({ message: 'Dataset updated successfully', dataset });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Delete dataset by ID\r\nexports.deleteDataset = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const dataset = await Dataset.findById(id);\r\n    if (!dataset) {\r\n      return res.status(404).json({ message: 'Dataset not found' });\r\n    }\r\n\r\n    await dataset.remove();\r\n    res.status(200).json({ message: 'Dataset deleted successfully' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n"],"file":"datasetController.dev.js"}