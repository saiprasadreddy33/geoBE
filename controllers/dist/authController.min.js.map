{"version":3,"sources":["authController.js"],"names":["jwt","require","bcrypt","generateToken","user","id","_id","process","env","JWT_SECRET","expiresIn","exports","req","_req$body","username","email","password","hashedPassword","newUser","token","regeneratorRuntime","async","_context","prev","next","body","awrap","User","findOne","sent","abrupt","res","status","json","message","hash","save","t0","stop","login","_req$body2","_context2","compare"],"mappings":"aACA,IAAMA,IAAMC,QAAQ,gBADpBC,OAAAD,QAAA,YACMD,KAAMC,QAAQ,kBAKdE,cAAgB,SAACC,GAHvB,OAAUJ,IAAGC,KAAO,CAACI,GAAAD,EAAAE,KAArBC,QAEAC,IAAAC,WAAA,CAAAC,UAAA,QACAC,QAAMR,OAAa,SAAGS,EAAhBT,GAAa,IAAAU,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAX,EACDD,EAAAa,KAATzB,EADUa,EACVb,SAASe,EADCF,EACDE,MAAAC,EADCH,EACDG,SADCM,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAM,MACjBC,KAAAC,QAAA,CAAAb,MAAAA,KADiB,KAAA,EAAA,GAAAO,EAAAO,KAAA,OAAAP,EAAAQ,OAAA,SAWNC,EAAIC,OAAO,KAAKC,KAAK,CAAEC,QAAS,yBAX1BZ,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAM,MAIFxB,OAAAiC,KAAAnB,EAAA,KAJE,KAAA,EAAA,OAIFC,EAJEK,EAAAO,KAIFX,EAAA,IAAAS,KAAA,CAAAb,SAAAA,EAAAC,MAAAA,EAAAC,SAAAC,IAJEK,EAAAE,KAAA,GAAAJ,mBAAAM,MAIFR,EAAAkB,QAJE,KAAA,GAIFjB,EAAAhB,cAAAe,GAKyBa,EAAAC,OALzB,KAAAC,KAAA,CAAAC,QAAA,4BAAAf,MAAAA,IAJEG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,MAAA,GAIFS,EAAAC,OAAA,KAAAC,KAAA,CAAAC,QAAAZ,EAAAe,GAAAH,UAJE,KAAA,GAAA,IAAA,MAAA,OAAAZ,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAIF3B,QAAA4B,MAAA,SAAA3B,EAAAmB,GAAA,IAAAS,EAAAzB,EAAAC,EAAAZ,EAAAe,EAAA,OAAAC,mBAAAC,MAAA,SAAAoB,GAAA,OAAA,OAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,KAAA,EAAA,OAAAgB,EAAA5B,EAAAa,KAAAV,EAAAyB,EAAAzB,MAAAC,EAAAwB,EAAAxB,SAAAyB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAAAJ,mBAAAM,MAO4BC,KAAAC,QAAA,CAAAb,MAAAA,KAP5B,KAAA,EAAA,GAOmBmB,EAPnBO,EAAAZ,KAAA,CAAAY,EAAAjB,KAAA,EAAA,MAAA,OAAAiB,EAAAX,OAAA,SAiCJC,EAAIC,OAAO,KAAKC,KAAK,CAAEC,QAAS,oBAjC5B,KAAA,EAAA,OAAAO,EAAAjB,KAAA,EAAAJ,mBAAAM,MAqCSxB,OAAOwC,QAAQ1B,EAAUZ,EAAKY,WArCvC,KAAA,EAAA,GAAAyB,EAAAZ,KAAA,CAAAY,EAAAjB,KAAA,GAAA,MAAA,OAAAiB,EAAAX,OAAA,SAWPb,EAAAA,OAXO,KAAAgB,KAAA,CAAAC,QAAA,wBAAA,KAAA,GAcwBnB,EAAKZ,cAAjBC,GAAA2B,EAAAC,OAdZ,KAAAC,KAAA,CAAAC,QAAA,mBAAAf,MAAAA,IAAAsB,EAAAjB,KAAA,GAAA,MAAA,KAAA,GAAAiB,EAAAlB,KAAA,GAAAkB,EAAAJ,GAAAI,EAAA,MAAA,GAAAV,EAAAC,OAAA,KAAAC,KAAA,CAAAC,QAAAO,EAAAJ,GAePnB,UAfO,KAAA,GAAA,IAAA,MAAA,OAAAuB,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"authController.min.js","sourcesContent":["// server/controllers/authController.js\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcryptjs');\r\nconst User = require('../models/User');\r\n\r\n// Function to generate JWT token\r\nconst generateToken = (user) => {\r\n  return jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n};\r\n\r\nexports.signup = async (req, res) => {\r\n  const { username, email, password } = req.body;\r\n\r\n  try {\r\n    // Check if user exists\r\n    let existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create new user\r\n    const newUser = new User({ username, email, password: hashedPassword });\r\n    await newUser.save();\r\n\r\n    // Generate token\r\n    const token = generateToken(newUser);\r\n\r\n    res.status(201).json({ message: 'User created successfully', token });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexports.login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Check if user exists\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    // Compare passwords\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ message: 'Incorrect password' });\r\n    }\r\n\r\n    // Generate token\r\n    const token = generateToken(user);\r\n\r\n    res.status(200).json({ message: 'Login successful', token });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n"]}