{"version":3,"sources":["datasetController.js"],"names":["Dataset","require","exports","getAllDatasets","req","res","datasets","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","status","json","t0","message","stop","getDatasetById","id","dataset","_context2","params","abrupt","createDataset","_req$body","name","description","data","newDataset","_context3","body","save","updateDataset","_req$body2","_context4","findById","deleteDataset","_context5","remove"],"mappings":"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","file":"datasetController.min.js","sourcesContent":["// server/controllers/datasetController.js\r\nconst Dataset = require('../models/Dataset');\r\n\r\n// Get all datasets\r\nexports.getAllDatasets = async (req, res) => {\r\n  try {\r\n    const datasets = await Dataset.find();\r\n    res.status(200).json(datasets);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Get dataset by ID\r\nexports.getDatasetById = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const dataset = await Dataset.findById(id);\r\n    if (!dataset) {\r\n      return res.status(404).json({ message: 'Dataset not found' });\r\n    }\r\n    res.status(200).json(dataset);\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Create a new dataset\r\nexports.createDataset = async (req, res) => {\r\n  const { name, description, data } = req.body;\r\n\r\n  try {\r\n    const newDataset = new Dataset({ name, description, data });\r\n    await newDataset.save();\r\n    res.status(201).json({ message: 'Dataset created successfully', dataset: newDataset });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Update dataset by ID\r\nexports.updateDataset = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { name, description, data } = req.body;\r\n\r\n  try {\r\n    const dataset = await Dataset.findById(id);\r\n    if (!dataset) {\r\n      return res.status(404).json({ message: 'Dataset not found' });\r\n    }\r\n    \r\n    dataset.name = name;\r\n    dataset.description = description;\r\n    dataset.data = data;\r\n\r\n    await dataset.save();\r\n    res.status(200).json({ message: 'Dataset updated successfully', dataset });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// Delete dataset by ID\r\nexports.deleteDataset = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const dataset = await Dataset.findById(id);\r\n    if (!dataset) {\r\n      return res.status(404).json({ message: 'Dataset not found' });\r\n    }\r\n\r\n    await dataset.remove();\r\n    res.status(200).json({ message: 'Dataset deleted successfully' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: error.message });\r\n  }\r\n};\r\n"]}